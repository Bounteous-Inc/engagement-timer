{
    "exportFormatVersion": 2,
    "exportTime": "2018-06-26 17:41:23",
    "containerVersion": {
        "path": "accounts/263956808/containers/2187017/versions/0",
        "accountId": "263956808",
        "containerId": "2187017",
        "containerVersionId": "0",
        "container": {
            "path": "accounts/263956808/containers/2187017",
            "accountId": "263956808",
            "containerId": "2187017",
            "name": "Engagement Timer",
            "publicId": "GTM-KZRPKJ",
            "usageContext": [
                "WEB"
            ],
            "fingerprint": "1494004709457",
            "tagManagerUrl": "https://tagmanager.google.com/#/container/accounts/263956808/containers/2187017/workspaces?apiLink=container"
        },
        "tag": [
            {
                "accountId": "263956808",
                "containerId": "2187017",
                "tagId": "5",
                "name": "CU - Engagement Timer - LunaMetrics Plugin",
                "type": "html",
                "parameter": [
                    {
                        "type": "TEMPLATE",
                        "key": "html",
                        "value": "<script id=\"gtm-engagement-timer\" type=\"text/javascript\">\n  /**\n   * Engagement Timer\n   *\n   * Measure time interacting with a given context. Pair with a visibility tracker\n   * for scroll-aware tracking.\n   *\n   * @example\n   * ```javascript\n   * var timer = EngagementTimer({\n   *   each: [5 * 60, 10*60],\n   *   every: [12],\n   *   context: '#content',\n   *   idleAfter: 5,\n   *   engagementEvents: ['click', 'mousedown', 'touchstart', 'keydown', 'scroll'],\n   *   startTime: +new Date,\n   *   idleOnVisibilityChange: true,\n   *   max: 60 * 15,\n   *   min: 10\n   * });\n   *\n   * timer.on('interval', function (evt) {\n   *\n   *   notifySomeService(evt.data.time);\n   *\n   * });\n   * ```\n   *\n   * Tested on:\n   * - Internet Explorer 9+\n   * - Edge 16\n   * - Chrome 62\n   * - Firefox 56\n   * - Opera 48\n   * - Safari 11\n   */\n  (function (document, window) {\n      'use strict';\n\n      window.EngagementTimer = window.EngagementTimer || EngagementTimer;\n\n      /**\n       * @name Interval\n       * @constructor\n       *\n       * @param {function} fn\n       * @param {number} interval - greater than 1000\n       */\n      function Interval(fn, interval) {\n\n          this._interval = interval;\n          this._fn = fn;\n\n          this.tick();\n\n      }\n\n      Interval.prototype.clear = function () {\n\n          this._cleared = true;\n\n      };\n\n      Interval.prototype.tick = function () {\n\n\n          setTimeout(function () {\n\n              if (this._cleared) {\n                  return;\n              }\n\n              this._fn();\n              this.tick();\n\n          }.bind(this), this._interval);\n\n      };\n\n      /**\n       * @name EngagementTimer\n       * Constructor for engagement timer\n       *\n       * @constructor\n       *\n       * @param opts {object} optsurations for timer\n       * @param opts.each {number[]} specific times to emit an event at, e.g. 4, 15\n       * @param opts.every {number[]} multiples to emit events every n seconds\n       * @param [opts.idleAfter] {number} number of seconds to wait before going idle and tracking pauses\n       * @param [opts.min] {number} minimum time in seconds before beginning to track events\n       * @param [opts.max] {number} maximum time in seconds to track events\n       * @param [opts.engagementEvents] {string[]} events to bind to that prevent idling\n       * @param [opts.idleOnVisibilityChange] {boolean} pause the timer when the tab is not visible\n       * @param [opts.startTime] {number} starting time to use when calculating time passed (defaults to when script runs or domInteractive timing)\n       * @param [opts.context] {HTMLElement|string} DOM element (or selector) to listen for engagementEvents on (defaults to document)\n       *\n       * @emits EngagementTimer#interval\n       * @emits EngagementTimer#reset\n       * @emits EngagementTimer#start\n       * @emits EngagementTimer#pause\n       * @emits EngagementTimer#idle\n       */\n      function EngagementTimer(opts) {\n\n          if (!opts.each && !opts.every) {\n              throw new Error('Requires opts.each or opts.every.');\n          }\n\n          if (\n              (opts.idleAfter || opts.engagementEvents) &&\n              !(opts.idleAfter && opts.engagementEvents && opts.engagementEvents.length)\n          ) {\n              throw new Error('Configure opts.idleAfter & opts.engagementEvents for idling.');\n          }\n\n          if (!(this instanceof EngagementTimer)) {\n              return new EngagementTimer(opts);\n          }\n\n          this._context = opts.context || document;\n\n          if (typeof this._context === 'string') {\n              this._context = document.querySelector(opts.context);\n          }\n          if (!this._context) {\n              throw new Error('Unable to find context ' + opts.context);\n          }\n\n          this._max = opts.max * 1000 || Infinity;\n          this._min = opts.min * 1000 || 0;\n          this._every = (opts.every || []).map(function (n) {\n\n              return opts.min ? (opts.min % n) + n : 0;\n\n          });\n          this._every.initialValues = cleanMarks(opts.every || []);\n          this._each = cleanMarks(opts.each || []);\n          this._each.initialValues = this._each.slice(0);\n\n          this._minInterval = 1000 * setGCD(this._every.initialValues.concat(this._each.initialValues));\n          this._idleAfter = opts.idleAfter * 1000 + 1 || null;\n          this._lastTick = opts.startTime;\n          this._trackedTime = this._lastTick ? +new Date - this._lastTick : 0;\n\n          this._tickElapsed = 0;\n          this._running = false;\n          this._offset = 0;\n          this._events = {};\n          this._cache = {};\n\n          var throttledRestart = throttle(function () {\n\n              if (!this._running) {\n                  this.start();\n              }\n\n              this._resetIdleTimeout();\n\n          }.bind(this), this._idleTimeout / 2);\n          var boundHandler = function (evt) {\n\n              this._context.addEventListener(evt, throttledRestart);\n\n          }.bind(this);\n          var pausedOnHide;\n\n          if (opts.engagementEvents) {\n              opts.engagementEvents.forEach(boundHandler);\n          }\n\n          if (opts.idleOnVisibilityChange) {\n\n              onVisibilityChange(function (isHidden) {\n\n                  if (isHidden && this._running) {\n\n                      this.pause();\n                      pausedOnHide = true;\n\n                  } else if (!isHidden && !this._running && pausedOnHide) {\n\n                      this.start();\n\n                  }\n\n              }.bind(this));\n\n          }\n\n          if (this._trackedTime) {\n              setTimeout(this._tick.bind(this), 0);\n          }\n\n      }\n\n      EngagementTimer.prototype._startTimer = function () {\n\n          this._Interval = new Interval(function () {\n\n              this._tick();\n              this._Interval.clear();\n              this._Interval = new Interval(this._tick.bind(this), this._minInterval);\n              this._tickElapsed = 0;\n\n          }.bind(this), Math.min(this._minInterval - this._tickElapsed, this._minInterval));\n\n      };\n\n      EngagementTimer.prototype._tick = function () {\n\n          var d = +new Date;\n\n          this._trackedTime += d - this._lastTick;\n          this._lastTick = d;\n\n          if (this._trackedTime < this._min) {\n              return;\n          }\n          if (this._trackedTime > this._max) {\n              this.destroy();\n              return;\n          }\n\n          this._checkMarks();\n\n      };\n\n      /**\n       * @param {string} evt\n       * @param {function} handler\n       */\n      EngagementTimer.prototype.on = function (evt, handler) {\n\n          if (!this._events[evt]) {\n              this._events[evt] = [];\n          }\n\n          this._events[evt].push(handler);\n\n      };\n\n      EngagementTimer.prototype.reset = function () {\n\n          this._each = this._each.initialValues.slice(0);\n          this._every = this._every.initialValues.slice(0);\n          this._lastTick = +new Date;\n          this._tickRemainder = 0;\n          this._trackedTime = 0;\n          this._cache = {};\n\n          this.emit('reset', {\n              data: {\n                  timestamp: +new Date\n              }\n          });\n\n      };\n\n      EngagementTimer.prototype.start = function () {\n\n          var d = +new Date;\n\n          if (this._running) {\n              return;\n          }\n\n          if (!this._idleTimer && this._idleAfter) {\n              this._resetIdleTimeout();\n          }\n\n          this._running = true;\n          this._startTimer();\n          this._lastTick = d - this._tickElapsed;\n\n          this.emit('start', {\n              data: {\n                  timestamp: d\n              }\n          });\n\n      };\n\n      EngagementTimer.prototype.pause = function () {\n\n          var d = +new Date;\n\n          this._tickElapsed = d - this._lastTick;\n          this._trackedTime += this._tickElapsed;\n\n          if (this._Interval) {\n              this._Interval.clear();\n          }\n\n          clearTimeout(this._idleTimer);\n\n          this._running = false;\n\n          this.emit('pause', {\n              data: {\n                  timestamp: +new Date\n              }\n          });\n\n      };\n\n      /**\n       * Emits events to registered handlers\n       *\n       * @param {string} name\n       * @param {object} data\n       */\n      EngagementTimer.prototype.emit = function (name, data) {\n\n          var handlers = this._events[name];\n\n          if (!handlers) return;\n\n          this._events[name].forEach(function (handler) {\n\n              setTimeout(function () {\n\n                  handler(data);\n\n              }, 0);\n\n          });\n\n      };\n\n      /**\n       * Cleans up after itself\n       */\n      EngagementTimer.prototype.destroy = function () {\n\n          if (this._Interval) {\n              this._Interval.clear();\n          }\n\n          clearTimeout(this._idleTimeout);\n\n      };\n\n      /**\n       * Checks the time elapsed and which times have been tracked\n       */\n      EngagementTimer.prototype._checkMarks = function () {\n\n          var curr = Math.floor(this._trackedTime / 1000);\n          var toCall = [];\n          var i = 0;\n          var intervals;\n          var memo;\n          var j;\n          var n;\n\n          while (this._each.length) {\n\n              n = this._each.shift();\n\n              if (n > curr) {\n                  this._each.unshift(n);\n                  break;\n              }\n\n              toCall.push(n);\n\n          }\n\n          while (i < this._every.length) {\n\n              n = this._every.initialValues[i];\n              memo = this._every[i];\n              j = 0;\n\n              i += 1;\n\n              if (memo <= curr) {\n\n                  intervals = Math.floor((curr - memo) / n);\n\n                  while (j < intervals) {\n                      j += 1;\n                      toCall.push(n * j + memo);\n                  }\n\n                  this._every[i - 1] = n * j;\n\n              }\n\n          }\n\n          toCall.sort(ascendingSort).forEach(this._checkMark.bind(this));\n\n      };\n\n      /**\n       * @param {number} mark\n       */\n      EngagementTimer.prototype._checkMark = function (mark) {\n\n          if (!this._cache[mark]) {\n\n              this._cache[mark] = true;\n              this.emit('interval', {\n                  data: {\n                      time: mark\n                  }\n              });\n\n          }\n\n      };\n\n\n      /**\n       * Resets the timeout for the idle counter\n       */\n      EngagementTimer.prototype._resetIdleTimeout = function () {\n\n          clearTimeout(this._idleTimer);\n\n          this._idleTimer = setTimeout(function () {\n\n              this.pause();\n              this.emit('idle', {\n                  data: {\n                      timestamp: +new Date\n                  }\n              });\n              this._idleTimer = null;\n\n          }.bind(this), this._idleAfter);\n\n      };\n\n      /**\n       * .sort() callback\n       *\n       * @param {number} a\n       * @param {number} b\n       *\n       * @return {number}\n       */\n      function ascendingSort(a, b) {\n\n          if (a > b) return 1;\n          if (b > a) return -1;\n          return 0;\n\n      }\n\n      /**\n       * Reduces and casts to number\n       * @param {*[]} configs\n       *\n       * @return {number[]}\n       */\n      function cleanMarks(arr) {\n\n          return arr.reduce(function (prev, curr) {\n\n              var n = Number(curr);\n\n              if (n) {\n                  prev.push(n);\n              }\n\n              return prev;\n\n          }, []).sort(ascendingSort);\n\n      }\n\n      /**\n       * Euclid GCD\n       *\n       * @param {number} a\n       * @param {number} b\n       *\n       * @returns {number}\n       *\n       *\n       */\n      function GCD(a, b) {\n\n          a = Math.abs(a);\n          b = Math.abs(b);\n\n          if (b > a) return GCD(b, a);\n\n          while (true) {\n              if (b === 0) return a;\n              a %= b;\n              if (a === 0) return b;\n              b %= a;\n          }\n\n      }\n      /**\n       * Euclid GCD on a set\n       *\n       * @param {number[]} set\n       *\n       * @returns {number}\n       */\n      function setGCD(set) {\n\n          if (set.length === 1) return set[0];\n\n          var gcd = set.pop();\n\n          return set.reduce(function (prev, curr) {\n\n              return GCD(prev, curr);\n\n          }, gcd);\n\n      }\n\n      /**\n       * @param {*} thing\n       *\n       * @returns {boolean}\n       */\n      function isDefined(thing) {\n\n          return typeof thing !== 'undefined';\n\n      }\n\n      /**\n       * @param {visibilityChangeHander} handler\n       */\n      /**\n       * @callback visibilityChangeHandler\n       * @private\n       *\n       * @param {bool} isHidden\n       */\n      function onVisibilityChange(handler) {\n\n          var visibilityChange,\n              hidden;\n\n          if (isDefined(document.hidden)) {\n\n              hidden = \"hidden\";\n              visibilityChange = \"visibilitychange\";\n\n          } else if (isDefined(document.mozHidden)) {\n\n              hidden = \"mozHidden\";\n              visibilityChange = \"mozvisibilitychange\";\n\n          } else if (isDefined(document.msHidden)) {\n\n              hidden = \"msHidden\";\n              visibilityChange = \"msvisibilitychange\";\n\n          } else if (isDefined(document.webkitHidden)) {\n\n              hidden = \"webkitHidden\";\n              visibilityChange = \"webkitvisibilitychange\";\n\n          }\n\n          if (visibilityChange) {\n\n              document.addEventListener(visibilityChange, function () {\n\n                  handler(document[hidden]);\n\n              });\n\n          } else {\n\n              window.addEventListener('blur', function () {\n\n                  handler(true);\n\n              });\n\n              window.addEventListener('focus', function () {\n\n                  handler(false);\n\n              });\n\n          }\n\n      }\n\n      /*\n       * Throttle function borrowed from:\n       * Underscore.js 1.5.2\n       * http://underscorejs.org\n       * (c) 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n       * Underscore may be freely distributed under the MIT license.\n       */\n      function throttle(func, wait) {\n          var context, args, result;\n          var timeout = null;\n          var previous = 0;\n          var later = function () {\n              previous = new Date;\n              timeout = null;\n              result = func.apply(context, args);\n          };\n          return function () {\n              var now = new Date;\n              if (!previous) previous = now;\n              var remaining = wait - (now - previous);\n              context = this;\n              args = arguments;\n              if (remaining <= 0) {\n                  clearTimeout(timeout);\n                  timeout = null;\n                  previous = now;\n                  result = func.apply(context, args);\n              } else if (!timeout) {\n                  timeout = setTimeout(later, remaining);\n              }\n              return result;\n          };\n      }\n\n  })(document, window);\n  /*\n   * v2.1.1\n   * Created by the Google Analytics consultants at http://www.lunametrics.com/\n   * Written by @notdanwilkerson\n   * Documentation: https://www.lunametrics.com/labs/recipes/engagement-timer/\n   * Licensed under the MIT License\n   */\n  // Default configurations for Google Tag Manager Engagement Timer\n  (function(window) {\n\n    var gtmTimer = EngagementTimer({\n      every: [Number({{Const - Engagement Timer - Tracking Interval}})],\n      idleAfter: Number({{Const - Engagement Timer - Time Before Considered Idle}}),\n      engagementEvents: ['click', 'touchstart', 'scroll', 'keydown', 'mousemove'],\n      idleOnVisibilityChange: true,\n      max: Number({{Const - Engagement Timer - Max Time On Page}}),\n      min: Number({{Const - Engagement Timer - Min Time On Page}})\n    });\n\n    gtmTimer.on('interval', function(interval) {\n\n      window.dataLayer.push({\n        event: 'engagementTimer',\n        attributes: {\n          counter: interval.data.time\n        }\n      });\n\n    });\n    \n    gtmTimer.start();\n\n    // Clear the global, since it's unlikely to be used by others in this context\n    window.EngagementTimer = null;\n    \n  })(window);\n</script>"
                    },
                    {
                        "type": "BOOLEAN",
                        "key": "supportDocumentWrite",
                        "value": "false"
                    }
                ],
                "fingerprint": "1530034876758",
                "firingTriggerId": [
                    "2147479553"
                ],
                "parentFolderId": "9",
                "tagFiringOption": "ONCE_PER_EVENT"
            },
            {
                "accountId": "263956808",
                "containerId": "2187017",
                "tagId": "6",
                "name": "GA - Event - Engaged Time",
                "type": "ua",
                "parameter": [
                    {
                        "type": "BOOLEAN",
                        "key": "nonInteraction",
                        "value": "true"
                    },
                    {
                        "type": "BOOLEAN",
                        "key": "useDebugVersion",
                        "value": "false"
                    },
                    {
                        "type": "TEMPLATE",
                        "key": "eventCategory",
                        "value": "Engagement Timer"
                    },
                    {
                        "type": "TEMPLATE",
                        "key": "trackType",
                        "value": "TRACK_EVENT"
                    },
                    {
                        "type": "TEMPLATE",
                        "key": "eventAction",
                        "value": "{{DLV - Engagement Timer Counter}}"
                    },
                    {
                        "type": "TEMPLATE",
                        "key": "eventLabel",
                        "value": "{{Page URL}}"
                    },
                    {
                        "type": "BOOLEAN",
                        "key": "overrideGaSettings",
                        "value": "true"
                    },
                    {
                        "type": "BOOLEAN",
                        "key": "setTrackerName",
                        "value": "false"
                    },
                    {
                        "type": "BOOLEAN",
                        "key": "doubleClick",
                        "value": "false"
                    },
                    {
                        "type": "TEMPLATE",
                        "key": "eventValue",
                        "value": "{{DLV - Engagement Timer Counter}}"
                    },
                    {
                        "type": "LIST",
                        "key": "fieldsToSet",
                        "list": [
                            {
                                "type": "MAP",
                                "map": [
                                    {
                                        "type": "TEMPLATE",
                                        "key": "fieldName",
                                        "value": "cookieDomain"
                                    },
                                    {
                                        "type": "TEMPLATE",
                                        "key": "value",
                                        "value": "auto"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "type": "BOOLEAN",
                        "key": "enableLinkId",
                        "value": "false"
                    },
                    {
                        "type": "BOOLEAN",
                        "key": "enableEcommerce",
                        "value": "false"
                    },
                    {
                        "type": "TEMPLATE",
                        "key": "trackingId",
                        "value": "{{YOUR_GA_PROPERTY_ID}}"
                    }
                ],
                "fingerprint": "1494004709452",
                "firingTriggerId": [
                    "10"
                ],
                "parentFolderId": "9",
                "tagFiringOption": "ONCE_PER_EVENT"
            }
        ],
        "trigger": [
            {
                "accountId": "263956808",
                "containerId": "2187017",
                "triggerId": "10",
                "name": "Event - engagementTimer",
                "type": "CUSTOM_EVENT",
                "customEventFilter": [
                    {
                        "type": "EQUALS",
                        "parameter": [
                            {
                                "type": "TEMPLATE",
                                "key": "arg0",
                                "value": "{{_event}}"
                            },
                            {
                                "type": "TEMPLATE",
                                "key": "arg1",
                                "value": "engagementTimer"
                            }
                        ]
                    }
                ],
                "fingerprint": "1494004709448",
                "parentFolderId": "9"
            }
        ],
        "variable": [
            {
                "accountId": "263956808",
                "containerId": "2187017",
                "variableId": "11",
                "name": "Const - Engagement Timer - Max Time On Page",
                "type": "c",
                "parameter": [
                    {
                        "type": "TEMPLATE",
                        "key": "value",
                        "value": "1800"
                    }
                ],
                "fingerprint": "1494004709448",
                "parentFolderId": "9"
            },
            {
                "accountId": "263956808",
                "containerId": "2187017",
                "variableId": "12",
                "name": "Const - Engagement Timer - Min Time On Page",
                "type": "c",
                "parameter": [
                    {
                        "type": "TEMPLATE",
                        "key": "value",
                        "value": "0"
                    }
                ],
                "fingerprint": "1494004709449",
                "parentFolderId": "9"
            },
            {
                "accountId": "263956808",
                "containerId": "2187017",
                "variableId": "13",
                "name": "Const - Engagement Timer - Time Before Considered Idle",
                "type": "c",
                "parameter": [
                    {
                        "type": "TEMPLATE",
                        "key": "value",
                        "value": "60"
                    }
                ],
                "fingerprint": "1494004709449",
                "parentFolderId": "9"
            },
            {
                "accountId": "263956808",
                "containerId": "2187017",
                "variableId": "14",
                "name": "Const - Engagement Timer - Tracking Interval",
                "type": "c",
                "parameter": [
                    {
                        "type": "TEMPLATE",
                        "key": "value",
                        "value": "30"
                    }
                ],
                "fingerprint": "1494004709450",
                "parentFolderId": "9"
            },
            {
                "accountId": "263956808",
                "containerId": "2187017",
                "variableId": "15",
                "name": "DLV - Engagement Timer Counter",
                "type": "v",
                "parameter": [
                    {
                        "type": "BOOLEAN",
                        "key": "setDefaultValue",
                        "value": "false"
                    },
                    {
                        "type": "INTEGER",
                        "key": "dataLayerVersion",
                        "value": "2"
                    },
                    {
                        "type": "TEMPLATE",
                        "key": "name",
                        "value": "attributes.counter"
                    }
                ],
                "fingerprint": "1494004709450",
                "parentFolderId": "9"
            }
        ],
        "folder": [
            {
                "accountId": "263956808",
                "containerId": "2187017",
                "folderId": "9",
                "name": "LunaMetrics Engagement Timer Plugin",
                "fingerprint": "1494004709447"
            }
        ],
        "builtInVariable": [
            {
                "accountId": "263956808",
                "containerId": "2187017",
                "type": "PAGE_URL",
                "name": "Page URL"
            }
        ],
        "fingerprint": "0",
        "tagManagerUrl": "https://tagmanager.google.com/#/versions/accounts/263956808/containers/2187017/versions/0?apiLink=version"
    }
}